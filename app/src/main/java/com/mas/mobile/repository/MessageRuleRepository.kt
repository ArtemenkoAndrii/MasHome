package com.mas.mobile.repository

import com.mas.mobile.repository.db.BaseRepository
import com.mas.mobile.repository.db.config.AppDatabase
import com.mas.mobile.repository.db.entity.ExpenditureData
import com.mas.mobile.repository.db.entity.MessageRule
import com.mas.mobile.repository.db.entity.MessageRuleData
import kotlinx.coroutines.runBlocking
import java.util.concurrent.Callable
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class MessageRuleRepository @Inject constructor(
    private val db: AppDatabase
) : BaseRepository<MessageRule> {
    val live = Live(db)
    class Live(val db: AppDatabase) {
        fun getAll() = db.messageRuleDao().getAllLive()
    }

    override fun getById(id: Int) = db.messageRuleDao().getById(id)

    override fun clone(item: MessageRule) =
        item.copy(data = item.data.also { it.id = 0 } )

    override fun createNew() = MessageRule(MessageRuleData(), ExpenditureData())

    fun getBySender(name: String) = db.messageRuleDao().getBySender(name)

    fun getAll() = db.messageRuleDao().getAll()

    override suspend fun insert(item: MessageRule): Long =
        updateDependencies(item) {
            db.messageRuleDao().insert(it)
        }

    override suspend fun update(item: MessageRule) {
        updateDependencies(item) {
            db.messageRuleDao().update(it).run { 0 }
        }
    }

    private suspend fun updateDependencies(item: MessageRule, save: suspend(param: MessageRule) -> Long) =
        if (item.expenditureId == AppDatabase.AUTOGENERATED) {
            db.runInTransaction(Callable {
                runBlocking {
                    val generatedId = db.expenditureDao().insertExpenditureData(item.expenditure).toInt()
                    save(item.also { it.expenditureId = generatedId })
                }
            })
        } else {
            save(item)
        }

    override suspend fun delete(item: MessageRule) {
        db.messageRuleDao().delete(item)
    }
}